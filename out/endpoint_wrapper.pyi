import abc
import collections
from ops.charm import CharmBase
from ops.framework import Object
from ops.model import Application, Relation as OpsRelation, Unit
from typing import Any, Dict, Iterable, Mapping, Optional, Tuple, Type, TypeVar, Union

Role: Any
Model = Any
ModelName: Any
Models = Mapping[ModelName, Optional[Model]]
UnitOrApplication = Union[Unit, Application]

class _Validator(metaclass=abc.ABCMeta):
    model: Model
    def validate(self, data: dict, _raise: bool = ...) -> bool: ...
    def check_field(self, key) -> Any: ...
    def deserialize(self, key, value) -> Any: ...
    def serialize(self, key, value) -> str: ...

logger: Any
M = TypeVar('M')

class DataBagModel:
    app: Optional[Type['Model']]
    unit: Optional[Type['Model']]
    def to_dict(self) -> dict: ...
    def __init__(self, app, unit) -> None: ...

class Template:
    requirer: Optional[DataBagModel]
    provider: Optional[DataBagModel]
    def as_requirer_model(self) -> RelationModel: ...
    def as_provider_model(self) -> RelationModel: ...
    def to_dict(self) -> dict: ...
    def __init__(self, requirer, provider) -> None: ...

class RelationModel:
    local_app_data_model: Optional[Type['Model']]
    remote_app_data_model: Optional[Type['Model']]
    local_unit_data_model: Optional[Type['Model']]
    remote_unit_data_model: Optional[Type['Model']]
    @staticmethod
    def from_charm(charm: CharmBase, relation_name: str, template: Template = ...) -> RelationModel: ...
    def get(self, name): ...
    def __init__(self, local_app_data_model, remote_app_data_model, local_unit_data_model, remote_unit_data_model) -> None: ...

class ValidationError(RuntimeError): ...
class CoercionError(ValidationError): ...
class InvalidFieldNameError(ValidationError): ...
class CannotWriteError(RuntimeError): ...

class DataclassValidator:
    @property
    def model(self): ...
    @model.setter
    def model(self, value) -> None: ...
    def validate(self, data: dict, _raise: bool = ...): ...
    def check_field(self, name): ...
    def serialize(self, key, value) -> str: ...
    def deserialize(self, key: str, value: str) -> Any: ...

class PydanticValidator:
    @property
    def model(self): ...
    @model.setter
    def model(self, value) -> None: ...
    def validate(self, data: dict, _raise: bool = ...): ...
    def check_field(self, name): ...
    def coerce(self, key, value): ...
    def serialize(self, key, value) -> str: ...
    def deserialize(self, obj: str, value: str) -> Any: ...

DEFAULT_VALIDATOR: Any

class _RelationBase:
    def __init__(self, charm: CharmBase, relation_name: str, model: RelationModel) -> None: ...
    @property
    def local_unit(self) -> Unit: ...
    @property
    def local_app(self) -> Application: ...

class DataWrapper(collections.abc.MutableMapping):
    can_write: Any
    def __init__(self, relation: OpsRelation, entity: UnitOrApplication, model: Model, validator: _Validator, can_write: bool = ...) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __getitem__(self, item): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __eq__(self, other): ...
    def __bool__(self): ...
    @property
    def valid(self) -> Optional[bool]: ...
    def validate(self) -> None: ...

class Relation(_RelationBase):
    def __init__(self, charm: CharmBase, relation: OpsRelation, model: RelationModel, validator: Type['_Validator'] = ...) -> None: ...
    def wraps(self, relation: OpsRelation): ...
    @property
    def relation(self) -> OpsRelation: ...
    @property
    def remote_units(self) -> Tuple[Unit]: ...
    @property
    def remote_app(self) -> Application: ...
    @property
    def remote_units_valid(self) -> Optional[bool]: ...
    @property
    def remote_app_valid(self) -> Optional[bool]: ...
    @property
    def local_unit_valid(self) -> Optional[bool]: ...
    @property
    def local_app_valid(self) -> Optional[bool]: ...
    @property
    def local_valid(self) -> Optional[bool]: ...
    @property
    def remote_valid(self) -> Optional[bool]: ...
    @property
    def valid(self) -> Optional[bool]: ...
    @property
    def local_app_data(self) -> DataWrapper[Any]: ...
    @property
    def remote_app_data(self) -> DataWrapper[Any]: ...
    @property
    def local_unit_data(self) -> DataWrapper[Any]: ...
    @property
    def remote_units_data(self) -> Mapping[Unit, DataWrapper[Any]]: ...

def get_worst_case(validity: Iterable[Optional[bool]]) -> Optional[bool]: ...

class _EndpointWrapper(_RelationBase, Object):
    def __init__(self, charm: CharmBase, relation_name: str, template: Template = ..., role: Role = ..., validator: Type['_Validator'] = ..., **kwargs) -> None: ...
    def publish_defaults(self, event) -> None: ...
    def wrap(self, relation: OpsRelation) -> Relation: ...
    @property
    def relations(self) -> Tuple[Relation, ...]: ...
    @property
    def remote_units_valid(self): ...
    @property
    def remote_apps_valid(self): ...
    @property
    def local_unit_valid(self): ...
    @property
    def local_app_valid(self): ...
    @property
    def remote_valid(self): ...
    @property
    def local_valid(self): ...
    @property
    def valid(self): ...
    @property
    def local_app_data(self) -> Dict[Application, DataWrapper[Any]]: ...
    @property
    def remote_apps_data(self) -> Dict[Application, DataWrapper[Any]]: ...
    @property
    def local_unit_data(self) -> Dict[Application, DataWrapper[Any]]: ...
    @property
    def remote_units_data(self) -> Dict[Unit, DataWrapper[Any]]: ...

def get_defaults(model): ...
def EndpointWrapper(*args, **kwargs): ...
def make_template(requirer_unit_model: Any | None = ..., requirer_app_model: Any | None = ..., provider_unit_model: Any | None = ..., provider_app_model: Any | None = ..., requirer: Any | None = ..., provider: Any | None = ...): ...
